				         <DSA/>
-----------------------------------------------------------------------
>NextPermuation :
Next lexicographically greater permutation (So right side is most significant) of its integer
Link:https://leetcode.com/submissions/detail/741919438/
Eg: 1234 => 1243
-Look for farthest increasing pair i.e 34 swap 3 with just greatest element towards right
-sort everything towards right of 3 
Similar: https://atcoder.jp/contests/abc276/submissions/36264384
-----------------------------------------------------------------------

BITS : https://leetcode.com/discuss/interview-question/3695233/All-Types-of-Patterns-for-Bits-Manipulations-and-How-to-use-it
https://leetcode.com/discuss/interview-question/3685049/25-variations-of-two-sum-question
-----------------------------------------------------------------------
>Subsets/Combinations:
[1,2,3]=>{ [][1][2][3][1,2][2,3][1,3][1,2,3] } 2^n subsets

Using Recursion:


Using Bits:

-----------------------------------------------------------------------
Priority Queue : CF : https://codeforces.com/contest/1728/submission/171357376
BS+PQ : https://practice.geeksforgeeks.org/contest/gfg-weekly-coding-contest-96/problems/# minimize computers


LeetCode:
Maximum Product After K Increments
--------------------------------------------------------------------------
DP : 
https://leetcode.com/problems/predict-the-winner/
--------------------------------------------------------------------------
when given to find NY SUCH PERMUTAION OBSERVE PATTERNS IN TEST CASES

----------------------------------------------------------------------------------------------
->-1 +1 cancellation and prefix sum + map: 

// When you are given only two (even) types of thing (here 0s and 1s) and if count or some property of each of those is equal (x no. of 0s and x no. of 1s) then :
// x is common and only one value (here 0 ( obtained by cancelling equal counts)) is possible for some property (here sum of 1s and -1s (0s) )

//this value of 0 (only single value) is used in map to know the distance between two such 0s (basically length of subarray having equal ones and zeroes)

https://leetcode.com/problems/contiguous-array/
------------


->Timeline/PrefixSums: pref[start]++ pref[end+1]--; pref[i]+=pref[i-1] gives no. of overlappng intervals
https://leetcode.com/discuss/study-guide/2166045/
LeetCode:
Divide Intervals into Min no. of groups (max no. of overlapping intervals)
Minimum number of platforms required for a railway (u need atleast max no. of overlapping intervals number of platforms)
Maximum Population Year
Shifting letter II
Min number of platforms
Find the Middle Index in Array
Sum of All Odd Length Subarrays
Find Pivot Index
Minimum Value to Get Positive Step by Step Sum
Range Sum Query - Immutable
----------------------------------------------------------------------------------------------

->PrefArray & SuffixArray:
Product of Array Except Self
----------------------------------------------------------------------------------------------

->MergeSort Logic: Intersection of two/multiple arrays LeetCode
Merge Two Sorted Lists

-----------------------------------------------------------------------------------------------
->Pick/Not Pick - DP : House Robber
Domino and Tromino Tiling
Check if There is a Valid Partition For The Array

------------------------------------------------------------------------------------------------
->How far you can reach/ MaxReach:
LeetCode:
Partition Labels
Jump Game II
Minimum Number of Increments on Subarrays to Form a Target Array
1326. Minimum Number of Taps to Open to Water a Garden
https://practice.geeksforgeeks.org/contest/gfg-weekly-coding-contest-133/problems - illuminate the hallways D problem
Interview bit - activate the lights

----------------------------------------------------------------------------------------------
->Explore all combinations and choose best
LeetCode:
Maximum Rows Covered by Columns


----------------------------------------------------------------------------------------------
->Palindrome Logic : even chars left and right side in middle odd no. of chars
LeetCode:
Largest Palindromic Number

----------------------------------------------------------------------------------------------
-->Expand from Middle:
Longest Palindromic Substring

----------------------------------------------------------------------------------------------
-> BFS : queue<index> , queue<TreeNode*>
LeetCode:
Jump Game III
Range Sum of BST
Is Graph Bipartite?
Shortest Path in Binary Matrix

-----------------------------------------------------------------------------------------------
->Tree indegree:
LeetCode:
Minimum Height Trees

----------------------------------------------------------------------------------------------
-> Binary Search on Ans:

FFFFTTTT - getFirstIndexWhereSomeCondition if good move to left else right :  ans will be right pointer
TTTTFFFF - getLastIndexWhereSomeCondition if good move to right else left : ans will be left pointer
Basic BS : https://practice.geeksforgeeks.org/contest/gfg-weekly-coding-contest-113/problems - C problem 
Soln: https://pastebin.com/PbSfpqvh

LeetCode:
Nth Magical Number
Minimum Garden Perimeter to Collect Enough Apples
Maximum White Tiles Covered by a Carpet (BS + PREFIXSUMS)
Max consecutive ones II (BS + PREFIXSUMS)
https://practice.geeksforgeeks.org/contest/gfg-weekly-coding-contest-96/problems/# minimize computers (BS+PQ , lazy addition)
Koko Eating Bananas
Maximum Candies Allocated to K Children
GFG contest B problem : https://practice.geeksforgeeks.org/contest/gfg-weekly-coding-contest-100/problems# (sort according to diff (greedy)+ prefix sum + bs )
soln : https://ideone.com/Z2APi8
------------------------------------------------------------------------------------------------
->Maps:
Task Scheduler II
Design a Number Container System
Check if Number is a Sum of Powers of Three

------------------------------------------------------------------------------------------------
->Sort + greedy
Maximum Number of Groups Entering a Competition
Max Sum of a Pair With Equal Sum of Digits
Successful Pairs of Spells and Potions
Assign Cookie
Two City Scheduling
Merge Intervals
Smallest Range II
Mice and Cheese (Sort according to difference / pick k ele from r1[] with greater diff)
-----------------------------------------------------------------------------------------------
->Fast Slow Pointers
Intersection of Two Linked Lists
Find duplicate
linked list cycle
nth node from end
midlle node
odd even ll


---------------------------------------------------------------------------------------------------
->Permutaions : n*(n+1)/2 , nC2
Number of Zero-Filled Subarrays
Count Unreachable Pairs of Nodes in an Undirected Graph

---------------------------------------------------------------------------------------------------
->GCD
Minimum Deletions to Make Array Divisible

------------------------------------------------------------------------------------------------------------------------------
->Divide and Conquer
Partition Array Such That Maximum Difference Is K

------------------------------------------------------------------------------------------------------
->Monotonic Stack
Daily Temp
maximal sqaure / rectangle trapping rain water
NGR / NGL / NSL / NSR
Minimize Result by Adding Parentheses to Expression

-----------------------------------------------------------------------------------------------------
->DP:
Predict the winner : Game Dp
Number of ways cutting pizza (DP + 2d prefix sum)

Form 1 : pick not + pick / subset sum / knapsack
Form 2 : Ending Form - LCS/LIS ending at i, number of subsets ending at i with sum j, number of subsets with sum=target ending at i 
Form 3 : LR / MultiSequence Dp - LCS, i->string A, j-> string B 
Form 4 : Game Dp: current state is winning state if you go to a state that makes the opponent loose
Form 5 : dp[level][lengthOfPrefixMatching] / Bitmask Dp / State Automata - finding no. of substrings where pattern "0100" is not substring 
Form 6 : Dp on matrix 
Form 7 : Matrix Chain Multiplication : Palindrome partitioning, solving for left and solving for right and then taking decision (postorder)
Form 8 : Dp on Trees / Graphs
Form 9 : Fibonacci, Catalan series
Form 10 : Gneral recursive/backtaracking DP

------------------------------------------------------------------------------------------------------
->DFS:
Check if There Is a Valid Parentheses String Path
GFG contest  C problem : https://practice.geeksforgeeks.org/contest/gfg-weekly-coding-contest-100/problems# (sort according to diff (greedy)+ prefix sum + bs )

----------------------------------------------------------------------------------------------------
->Adhoc:
Minimum Amount of Time to Fill Cups
Maximum XOR After Operations
Longest Binary Subsequence Less Than or Equal to K
Sum of Numbers With Units Digit K
Calculate Amount Paid in Taxes
Replace Elements in an Array
Maximum Number of Coins You Can Get
Longest Substring with At Least K Repeating Characters
Maximize the Topmost Element After K Moves

--------------------------------------------------------------------------------------------------------
=>Suffix Concept for calculating how man: https://www.codechef.com/submit/WEIRDSUBARR?tab=statement

//dec[i] = startig from i (think from n-1) how many elements(how far you can go / length) that are strictly dec 
//inc[i] = startig from i (think from n-1) how many elements(how far you can go / length) that are strictly inc

//last single element both inc and dec
dec[n-1] = inc[n-1] = 1;

//from last populate inc[] and dec[] => similar to prefix concept but from end => suffix concept
for(int i=n-2;i>=0;i--){
    //strictly dec
    dec[i] = (v[i] > v[i+1])?(dec[i+1] + 1):1;
        
    //strictly inc
    inc[i] = (v[i] < v[i+1])?(inc[i+1] + 1):1;
}
-----------------------------------------------------------------------------------------------------
=>Stacks: 

O(n^2) to O(n) : if j loop depends on i it may be stack

-----------------------------------------------------------------------------------------------------
=>Sorting for values + Ordered DS for indexes (Set with lower_bound/upper_bound) : 
=>Next greater 4 , Count Inversion
when some element has fixed ans: Eg : There will always be one ans (False/0/-1) for fixed ele (min/max)
When there is dependecy on index and value
Similar to Binary Search Predicate function / Bs on ans 

-----------------------------------------------------------------------------------------------------
=> COLLISIONS | Think What Matters for calculating final ans and ignore what doesn't matter =>IGNORE COLLISION | ORDER OF FINAL POSITIONS WONT MATTER SO SORT (i,j) and (j,i) are same
-https://leetcode.com/contest/biweekly-contest-106/problems/movement-of-robots/
-https://leetcode.com/problems/last-moment-before-all-ants-fall-out-of-a-plank/
